name: Build, Push and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Verify backend directory contents
        run: |
          echo "Current working directory: $(pwd)"
          echo "Contents of root directory:"
          ls -la
          echo "Dockerfile contents:"
          cat Dockerfile || echo "Dockerfile not found!"
          echo "Contents of backend directory:"
          ls -la ./str || echo "Backend directory not found!"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/backend:latest

  build-nginx:
    runs-on: ubuntu-latest
    needs: build-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push nginx image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: nginx/nginx.Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/nginx:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-backend, build-nginx ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Remove unused Docker images
        run: docker image prune -f

      - name: Clean up old Docker containers and images on server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /root/str
            docker compose down --remove-orphans

      - name: Create nginx directory on server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p /root/str/nginx/

      - name: Copy docker-compose.yaml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          source: "docker-compose.yaml"
          target: "/root/str/"
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}

      - name: Copy nginx directory to server
        uses: appleboy/scp-action@v0.1.7
        with:
          source: "nginx/*"
          target: "/root/str/nginx/"
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          strip_components: 1

      - name: Проверка наличия файлов в nginx директории
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            ls -la /root/str/nginx

      - name: Проверка содержимого docker-compose.yaml
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cat /root/str/docker-compose.yaml

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: |
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DB_ENGINE=${{ secrets.DB_ENGINE }}
            DB_NAME=${{ secrets.DB_NAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
          debug: true
          script: |
            cd /root/str

            if [ ! -f docker-compose.yaml ]; then
              echo "docker-compose.yaml not found!"
              exit 1
            fi
            echo "docker-compose.yaml found."

            # Создание файла .env
            rm -f .env
            touch .env
            chmod 600 .env

            echo "SECRET_KEY=$SECRET_KEY" >> .env
            echo "DB_ENGINE=$DB_ENGINE" >> .env
            echo "DB_NAME=$DB_NAME" >> .env
            echo "POSTGRES_USER=$POSTGRES_USER" >> .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
            echo "DB_HOST=$DB_HOST" >> .env
            echo "DB_PORT=$DB_PORT" >> .env

            echo "Contents of .env:"
            cat .env

            # Запуск обновления образов и контейнеров
            docker compose pull
            docker compose up -d --build

      - name: Notify success
        if: success()
        run: echo "Deployment was successful!"
