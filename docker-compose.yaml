version: '3.8'

services:
  web:
    image: yuraskv/backend:latest
    restart: always
    env_file:
      - ./.env
    volumes:
      - static_value:/var/html/static/
      - media_value:/var/html/media/
    depends_on:
      - db

  db:
    image: postgres:13
    restart: always
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  nginx:
    build:
      context: .
      dockerfile: nginx/nginx.Dockerfile
    ports:
      - "80:80"
    volumes:
      - static_value:/var/html/static/
      - media_value:/var/html/media/
    depends_on:
      - web

volumes:
  static_value:
  media_value:
  postgres_data:

#version: '3.8'
#
#services:
#  db:
#    image: postgres:15.0-alpine
#    volumes:
#      - /var/lib/postgresql/data/
#    env_file:
#      - ./.env
#  web:
#    image: yuraskv/backend:latest # Используем уже готовый образ вместо локальной сборки
#    restart: always
#    volumes:
#      - static_value:/app/static/
#      - media_value:/app/media/
#    depends_on:
#      - db
#    env_file:
#      - ./.env
##  web:
##    build: .
##    restart: always
##    volumes:
##      - static_value:/app/static/
##      - media_value:/app/media/
##    depends_on:
##      - db
##    env_file:
##      - ./.env
#
#  frontend:
#    image: annakharatova/partners-map:latest
#    restart: always
#    expose:
#      - "3000"
#    environment:
#      - NODE_ENV=production
#    volumes:
#      - frontend_build:/app/dist/
#
#  nginx:
#    image: nginx:1.21.3-alpine
#    ports:
#      - "80:80"
#    volumes:
#      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
#      - static_value:/var/html/static/
#      - media_value:/var/html/media/
#      - frontend_build:/usr/share/nginx/html
#    depends_on:
#      - web
#      - frontend
#
#volumes:
#  static_value:
#  media_value:
#  frontend_build:
