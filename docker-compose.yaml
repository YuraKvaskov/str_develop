services:
  db:
    image: postgres:13
    restart: always
    env_file:
      - ./.env  # Файл с переменными окружения для базы данных
    volumes:
      - postgres_data:/var/lib/postgresql/data/  # Хранение данных базы
    networks:
      - backend_network

  backend:
    image: yuraskv/backend:latest  # Образ на Docker Hub
    restart: always
    env_file:
      - ./.env  # Файл с переменными окружения для Django-приложения
    volumes:
      - static_value:/var/html/static/  # Том для статических файлов
      - media_value:/var/html/media/  # Том для медиа-файлов
    depends_on:
      - db
    networks:
      - backend_network
    expose:
      - "8000"  # Порт, который будет использоваться для взаимодействия с Nginx

  frontend:
    image: yuraskv/frontend:latest  # Образ на Docker Hub
    restart: "no"  # Нет необходимости в постоянном перезапуске фронтенда
    environment:
      - NODE_ENV=production  # Переменная окружения для сборки фронтенда
    volumes:
      - frontend_build:/app/dist  # Том для сборки фронтенда
    networks:
      - backend_network

  nginx:
    build:
      context: .
      dockerfile: nginx/nginx.Dockerfile  # Dockerfile для Nginx
    ports:
      - "80:80"  # Публикация порта 80 для доступа к приложению
    volumes:
      - static_value:/var/html/static/  # Том для статических файлов
      - media_value:/var/html/media/  # Том для медиа-файлов
      - frontend_build:/usr/share/nginx/html  # Том для скомпилированных файлов фронтенда
    depends_on:
      - backend  # Сначала должен запуститься бэкенд
      - frontend  # И затем фронтенд
    networks:
      - backend_network

volumes:
  static_value:  # Том для хранения статических файлов
  media_value:  # Том для хранения медиа-файлов
  postgres_data:  # Том для хранения данных PostgreSQL
  frontend_build:  # Том для хранения собранных файлов фронтенда

networks:
  backend_network:  # Общая сеть для всех контейнеров
